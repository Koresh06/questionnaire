from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state

from app.middlewares.middleware import Is_Admin
from app.keyboards.reply import AdminReply
from app.keyboards.inline import AdminInline
from app.requests.admin_req import AdminRequest
from app.fsm.fsm import NewLetter


admin = Router()

admin.message.middleware(Is_Admin())

@admin.message(Command('admin'))
async def cmd_admin(message: Message):
    await message.answer('–ü—Ä–∏–≤–µ—Ç —Ö–æ–∑—è–∏–Ω', reply_markup=await AdminReply.kb_menu_admin())


@admin.message(F.text.endswith('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏'))
async def users(message: Message):
    await message.answer(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', reply_markup=await AdminInline.users())


@admin.callback_query(F.data == 'backward')
async def backward(callback: CallbackQuery):
    await callback.message.edit_text(text='–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏', reply_markup=await AdminInline.users())


@admin.callback_query(F.data.startswith('user'))
async def cmd_info_user(callback: CallbackQuery):
    tg_id = int(callback.data.split("_")[-1])
    info = await AdminRequest.info_user(tg_id)
    responses = info.data
    await callback.message.edit_text(text=f'üèôÔ∏è –ì–æ—Ä–æ–¥ - {responses["town"]}\nüòé –ò–º—è - {responses["name"]}\n\n–ê–≤—Ç–æ - {responses["quest_one"]}\n–†–∞–±–æ—Ç–∞ - {responses["quest_two"]}\n–ù–∞–≤—ã–∫–∏ - {responses["quest_three"]}\n–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç - {responses["quest_four"]}\n–ú—è–≥–∫–∏–µ –æ–∫–Ω–∞ - {responses["quest_five"]}\n–ß–µ—Ä—á–µ–Ω–∏–µ - {responses["quest_six"]}\n\n‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: <tg-spoiler>{responses["phone"]}</tg-spoiler>', reply_markup=await AdminInline.url_user(tg_id, info.username))


# @admin.message(Command(commands='cancel'), ~StateFilter(default_state))
# async def process_cancel_command_state(message: Message, state: FSMContext):
#     await message.answer(text='–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏!', reply_markup=await AdminReply.kb_menu_admin())
#     await state.clear()


# @admin.message(F.text.endswith('–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É'), StateFilter(default_state))
# async def cmd_distribution(message: Message, state: FSMContext):
#     await state.set_state(NewLetter.text)
#     await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏!\n\n‚ùå –û—Ç–º–µ–Ω–∞ - /cancel')


# @admin.message(NewLetter.text)
# async def cmd_message(message: Message, state: FSMContext):
#     await state.update_data(text=message.text)
#     await message.answer(f'<b><u>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–µ–∫—Å—Ç –†–ê–°–°–´–õ–ö–ò</u></b>\n\n\n{message.text}\n\n\n‚ùå –û—Ç–º–µ–Ω–∞ - /cancel', reply_markup=await AdminReply.result_distribution())
#     await state.set_state(NewLetter.result)


# @admin.message(F.text.endswith('–û—Ç–ø—Ä–∞–≤–∏—Ç—å'), NewLetter.result)
# async def cmd_send(message: Message, state: FSMContext):
#     users = await AdminRequest.get_users()
#     data = await state.get_data()
#     for item in users:
#         try:
#             await message.bot.send_message(chat_id=item.tg_id, text=data['text'])
#         except Exception as exxit:
#             print(exxit)
#     await message.answer('üî∞ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞', reply_markup=await AdminReply.kb_menu_admin())
#     await state.clear()


# @admin.message(F.text.endswith('–û—Ç–º–µ–Ω–∞'), NewLetter.result)
# async def cmd_cancle_distribution(message: Message, state: FSMContext):
#     await state.clear()
#     await message.answer('–û—Ç–º–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∏!', reply_markup=await AdminReply.kb_menu_admin())