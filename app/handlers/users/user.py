import config
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import CommandStart, StateFilter, Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import default_state

from app.requests.user_req import UserRequests
from app.keyboards.inline import UserInline
from app.fsm.fsm import Question
from app.keyboards.reply import digit_kb, cancle, phone_user
from app.lexicon.lexicon import RESPONSES, TEXT, RESALT


router = Router()

@router.message(F.text.endswith('–û—Ç–º–µ–Ω–∞'), StateFilter(default_state))
async def process_cancel_command(message: Message, state: FSMContext):
    await message.answer(text='–í—ã –Ω–µ –∑–∞–ø–æ–ª–Ω—è–µ—Ç–µ —Ñ–æ—Ä–º—É, –ø–æ—ç—Ç–æ–º—É –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π!', reply_markup=ReplyKeyboardRemove())
    await state.clear()


@router.message(F.text.endswith('–û—Ç–º–µ–Ω–∞'), ~StateFilter(default_state))
async def process_cancel_command_state(message: Message, state: FSMContext):
    await message.answer(text='–ß—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∂–º–∏—Ç–µ /start', reply_markup=ReplyKeyboardRemove())
    await state.clear()

@router.message(CommandStart(), StateFilter(default_state))
async def cmd_start(message: Message, state: FSMContext):
    user = await UserRequests.chek_user(message.from_user.id)
    if not user:
        await message.answer(text=TEXT['town'], reply_markup=await cancle())
        await state.set_state(Question.town)
    else:
        await message.answer('–í—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ!')

@router.message(StateFilter(Question.town))
async def cmd_town(message: Message, state: FSMContext):
    await state.update_data(town=message.text)
    await message.answer(text=TEXT['name'], reply_markup= await cancle())
    await state.set_state(Question.name)

@router.message(StateFilter(Question.name))
async def cmd_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer(text=TEXT[1], reply_markup=await digit_kb(len(RESPONSES['quest_one'])))
    await state.set_state(Question.quest_one)

@router.message(StateFilter(Question.quest_one))
async def cmd_question_one(message: Message, state: FSMContext):
    if int(message.text) == 2:
        await message.answer(text='–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–∞–ª–∏—á–∏–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –æ—Å–Ω–æ–≤–Ω–æ–µ —É—Å–ª–æ–≤–∏–µ. –ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å  –Ω–æ –≤—ã –Ω–∞–º –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç–µ.')
        await state.clear()
    else:
        await state.update_data(quest_one=RESPONSES['quest_one'][int(message.text)])
        await message.answer(text=TEXT[2], reply_markup=await digit_kb(len(RESPONSES['quest_two'])))
        await state.set_state(Question.quest_two)


@router.message(StateFilter(Question.quest_two))
async def cmd_question_two(message: Message, state: FSMContext):
    if int(message.text) == 3:
        await message.answer(text='–ú—ã –Ω–µ —Å–º–æ–∂–µ–º –æ–±–µ—Å–ø–µ—á–∏—Ç—å –≤–∞—Å —Ä–∞–±–æ—Ç–æ–π –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –æ—Å–Ω–æ–≤–µ. –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–¥—Ä–∞–±–æ—Ç–∫—É.')
        await state.clear()
    else:
        await state.update_data(quest_two=RESPONSES['quest_two'][int(message.text)])
        await message.answer(text=TEXT[3], reply_markup=await digit_kb(len(RESPONSES['quest_three'])))
        await state.set_state(Question.quest_three)


@router.message(StateFilter(Question.quest_three))
async def cmd_question_three(message: Message, state: FSMContext):
    if int(message.text) == 3:
        await message.answer(text='–ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å  –Ω–æ –≤—ã –Ω–∞–º –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç–µ.')
        await state.clear()
    else:
        await state.update_data(quest_three=RESPONSES['quest_three'][int(message.text)])
        await message.answer(text=TEXT[4], reply_markup=await digit_kb(len(RESPONSES['quest_four'])))
        await state.set_state(Question.quest_four)


@router.message(StateFilter(Question.quest_four))
async def cmd_question_four(message: Message, state: FSMContext):
    if int(message.text) == 3:
        await message.answer(text='–ù–∞–º –æ—á–µ–Ω—å –∂–∞–ª—å  –Ω–æ –≤—ã –Ω–∞–º –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç–µ.')
        await state.clear()
    else:
        await state.update_data(quest_four=RESPONSES['quest_four'][int(message.text)])
        await message.answer(text=TEXT[5], reply_markup=await digit_kb(len(RESPONSES['quest_five'])))
        await state.set_state(Question.quest_five)


@router.message(StateFilter(Question.quest_five))
async def cmd_question_five(message: Message, state: FSMContext):
    await state.update_data(quest_five=RESPONSES['quest_five'][int(message.text)])
    await message.answer(text=TEXT[6], reply_markup=await digit_kb(len(RESPONSES['quest_six'])))
    await state.set_state(Question.quest_six)


@router.message(StateFilter(Question.quest_six))
async def cmd_question_six(message: Message, state: FSMContext):
    await state.update_data(quest_six=RESPONSES['quest_six'][int(message.text)])
    await message.answer(text='–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏', reply_markup=await phone_user())
    await state.set_state(Question.phone)

@router.message(StateFilter(Question.phone))
async def cmd_phone(message: Message, state: FSMContext):
    await state.update_data(phone=message.contact.phone_number)
    data = await state.get_data()
    if await UserRequests.save_responces(data, message.from_user.id, message.from_user.first_name):
        await message.answer(text=RESALT['text'], reply_markup=ReplyKeyboardRemove())
        await message.bot.send_message(chat_id=config.ADMIN_ID, text=f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.first_name}\n\nüèôÔ∏è –ì–æ—Ä–æ–¥ - {data["town"]}\nüòé –ò–º—è - {data["name"]}\n\n–ê–≤—Ç–æ - {data["quest_one"]}\n–†–∞–±–æ—Ç–∞ - {data["quest_two"]}\n–ù–∞–≤—ã–∫–∏ - {data["quest_three"]}\n–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç - {data["quest_four"]}\n–ú—è–≥–∫–∏–µ –æ–∫–Ω–∞ - {data["quest_five"]}\n–ß–µ—Ä—á–µ–Ω–∏–µ - {data["quest_six"]}\n\n‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: {data["phone"]}', reply_markup=await UserInline.url_user(message.from_user.id, message.from_user.first_name))
        await state.clear()
    else: 
        await message.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–ª–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É!')
        await state.clear()